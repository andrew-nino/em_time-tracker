// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	entity "github.com/andrew-nino/em_time-tracker/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateManager mocks base method.
func (m *MockAuthorization) CreateManager(user entity.Manager) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManager", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManager indicates an expected call of CreateManager.
func (mr *MockAuthorizationMockRecorder) CreateManager(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManager", reflect.TypeOf((*MockAuthorization)(nil).CreateManager), user)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// SignIn mocks base method.
func (m *MockAuthorization) SignIn(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationMockRecorder) SignIn(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorization)(nil).SignIn), username, password)
}

// MockPeople is a mock of People interface.
type MockPeople struct {
	ctrl     *gomock.Controller
	recorder *MockPeopleMockRecorder
}

// MockPeopleMockRecorder is the mock recorder for MockPeople.
type MockPeopleMockRecorder struct {
	mock *MockPeople
}

// NewMockPeople creates a new mock instance.
func NewMockPeople(ctrl *gomock.Controller) *MockPeople {
	mock := &MockPeople{ctrl: ctrl}
	mock.recorder = &MockPeopleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeople) EXPECT() *MockPeopleMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPeople) CreatePerson(managerID int, passport string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", managerID, passport)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPeopleMockRecorder) CreatePerson(managerID, passport any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPeople)(nil).CreatePerson), managerID, passport)
}

// DeletePerson mocks base method.
func (m *MockPeople) DeletePerson(managerID int, passport string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", managerID, passport)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPeopleMockRecorder) DeletePerson(managerID, passport any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPeople)(nil).DeletePerson), managerID, passport)
}

// UpdatePerson mocks base method.
func (m *MockPeople) UpdatePerson(passport string, newData entity.People) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", passport, newData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPeopleMockRecorder) UpdatePerson(passport, newData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPeople)(nil).UpdatePerson), passport, newData)
}

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// GetAllUsersInfo mocks base method.
func (m *MockInfo) GetAllUsersInfo(filterUsers, sortProperty, sortDirection, limit string) ([]entity.People, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersInfo", filterUsers, sortProperty, sortDirection, limit)
	ret0, _ := ret[0].([]entity.People)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersInfo indicates an expected call of GetAllUsersInfo.
func (mr *MockInfoMockRecorder) GetAllUsersInfo(filterUsers, sortProperty, sortDirection, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersInfo", reflect.TypeOf((*MockInfo)(nil).GetAllUsersInfo), filterUsers, sortProperty, sortDirection, limit)
}

// GetUserEffort mocks base method.
func (m *MockInfo) GetUserEffort(user_id, beginningPeriod, endPeriod string) ([]entity.Effort, entity.People, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEffort", user_id, beginningPeriod, endPeriod)
	ret0, _ := ret[0].([]entity.Effort)
	ret1, _ := ret[1].(entity.People)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserEffort indicates an expected call of GetUserEffort.
func (mr *MockInfoMockRecorder) GetUserEffort(user_id, beginningPeriod, endPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEffort", reflect.TypeOf((*MockInfo)(nil).GetUserEffort), user_id, beginningPeriod, endPeriod)
}

// GetUserInfo mocks base method.
func (m *MockInfo) GetUserInfo(serie, number string) (entity.People, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", serie, number)
	ret0, _ := ret[0].(entity.People)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockInfoMockRecorder) GetUserInfo(serie, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockInfo)(nil).GetUserInfo), serie, number)
}

// MockTasks is a mock of Tasks interface.
type MockTasks struct {
	ctrl     *gomock.Controller
	recorder *MockTasksMockRecorder
}

// MockTasksMockRecorder is the mock recorder for MockTasks.
type MockTasksMockRecorder struct {
	mock *MockTasks
}

// NewMockTasks creates a new mock instance.
func NewMockTasks(ctrl *gomock.Controller) *MockTasks {
	mock := &MockTasks{ctrl: ctrl}
	mock.recorder = &MockTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasks) EXPECT() *MockTasksMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTasks) CreateTask(task entity.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTasksMockRecorder) CreateTask(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTasks)(nil).CreateTask), task)
}

// DeleteTask mocks base method.
func (m *MockTasks) DeleteTask(taskId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTasksMockRecorder) DeleteTask(taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTasks)(nil).DeleteTask), taskId)
}

// GetTask mocks base method.
func (m *MockTasks) GetTask(taskId int) (entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", taskId)
	ret0, _ := ret[0].(entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTasksMockRecorder) GetTask(taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTasks)(nil).GetTask), taskId)
}

// GetTasks mocks base method.
func (m *MockTasks) GetTasks(limit int) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", limit)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTasksMockRecorder) GetTasks(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTasks)(nil).GetTasks), limit)
}

// MockTracker is a mock of Tracker interface.
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker.
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance.
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// StartTracker mocks base method.
func (m *MockTracker) StartTracker(user_id, task_id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTracker", user_id, task_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTracker indicates an expected call of StartTracker.
func (mr *MockTrackerMockRecorder) StartTracker(user_id, task_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTracker", reflect.TypeOf((*MockTracker)(nil).StartTracker), user_id, task_id)
}

// StopTracker mocks base method.
func (m *MockTracker) StopTracker(user_id, task_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTracker", user_id, task_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTracker indicates an expected call of StopTracker.
func (mr *MockTrackerMockRecorder) StopTracker(user_id, task_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTracker", reflect.TypeOf((*MockTracker)(nil).StopTracker), user_id, task_id)
}
