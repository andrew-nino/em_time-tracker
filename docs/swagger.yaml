basePath: /
definitions:
  entity.Effort:
    properties:
      description:
        type: string
      task_id:
        type: string
      total_time:
        type: string
    type: object
  entity.Manager:
    properties:
      managername:
        example: Manager
        type: string
      name:
        example: Andrew
        type: string
      password:
        example: qwerty
        type: string
    required:
    - managername
    - name
    - password
    type: object
  entity.People:
    properties:
      address:
        example: г. Москва, ул. Ленина, д. 5, кв. 1
        type: string
      name:
        example: Иван
        type: string
      patronymic:
        example: Иванович
        type: string
      surname:
        example: Иванов
        type: string
    type: object
  entity.Task:
    properties:
      description:
        example: A very important task
        type: string
      importance:
        example: low or high
        type: string
      name:
        example: T-001
        type: string
    type: object
  v1.errorResponse:
    properties:
      message:
        type: string
    type: object
  v1.getUserEffort.responce:
    properties:
      description:
        type: string
      effort:
        items:
          $ref: '#/definitions/entity.Effort'
        type: array
      name:
        type: string
      surname:
        type: string
    type: object
  v1.response:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  v1.signInInput:
    properties:
      managername:
        example: Manager
        type: string
      password:
        example: qwerty
        type: string
    required:
    - managername
    - password
    type: object
  v1.userInput:
    properties:
      passportNumber:
        type: string
    required:
    - passportNumber
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for test work
  title: Effective Mobile API
  version: 1.0.0
paths:
  /api/v1/info:
    get:
      consumes:
      - application/json
      description: A method for obtaining information about a user using his passport
        data. Defined in the task conditions.
      operationId: ger-user-info
      parameters:
      - description: passportSerie
        in: query
        name: passportSerie
        required: true
        type: integer
      - description: passportNumber
        in: query
        name: passportNumber
        required: true
        type: integer
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/entity.People'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user info
      tags:
      - info
  /api/v1/info/all:
    get:
      consumes:
      - application/json
      description: Filtering is possible by the fields "surname", "name", "patronymic",
        "address". The field(s) for sorting and its direction are specified.
      operationId: get-all-user-info
      parameters:
      - description: 'filtering by fields: surname, name, patronymic, address'
        in: query
        name: filter
        type: string
      - description: 'sorting by fields: surname, name, patronymic, address'
        in: query
        name: sortProperty
        type: string
      - description: sorting direction DESC and ASC
        in: query
        name: sortDirection
        type: string
      - description: output limit - maximum value is 10.
        in: query
        name: limit
        required: true
        type: integer
      responses:
        "200":
          description: Ok
          schema:
            items:
              $ref: '#/definitions/entity.People'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Receiving data about all users with filtering and sorting.
      tags:
      - info
  /api/v1/info/effort:
    get:
      consumes:
      - application/json
      description: Obtaining labor costs by user for a period/ task is the sum of
        hours and minutes, sorted from the highest cost to the least
      operationId: get-user-effort
      parameters:
      - description: user id
        in: query
        name: user_id
        required: true
        type: string
      - description: beginning of period in format 2024-07-03
        in: query
        name: beginning
        type: string
      - description: end of period in format 2024-07-04
        in: query
        name: end
        type: string
      responses:
        "200":
          description: Ok
          schema:
            $ref: '#/definitions/v1.getUserEffort.responce'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtaining labor costs for a user in a certain period.
      tags:
      - info
  /api/v1/people/create:
    post:
      consumes:
      - application/json
      description: The format is specified in the task conditions. Creates a new user
        using passport data. Returns the ID of the created user. To further fill/change
        data, the Update method works.
      operationId: create-person
      parameters:
      - description: passportNumber
        in: body
        name: passportNumber
        required: true
        schema:
          $ref: '#/definitions/v1.userInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create person
      tags:
      - people
  /api/v1/people/delete:
    delete:
      consumes:
      - application/json
      description: Based on accepted passport data, removes the user from the system.
      operationId: delete-person
      parameters:
      - description: passportNumber
        in: body
        name: passportNumber
        required: true
        schema:
          $ref: '#/definitions/v1.userInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete information about a person
      tags:
      - people
  /api/v1/people/update:
    patch:
      consumes:
      - application/json
      description: Updates the user data to the specified one. user verification is
        carried out using the passport data in the body of the request. If successful,
        returns a message and user ID.
      operationId: update-person
      parameters:
      - description: passportNumber
        in: body
        name: passportNumber
        required: true
        schema:
          $ref: '#/definitions/v1.userInput'
      - description: surname user
        in: query
        name: surname
        type: string
      - description: name user
        in: query
        name: name
        type: string
      - description: patronymic user
        in: query
        name: patronymic
        type: string
      - description: address user
        in: query
        name: address
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Updates information about a person
      tags:
      - people
  /api/v1/tasks/all:
    get:
      consumes:
      - application/json
      description: We receive all the tasks and set a limit on page output.
      operationId: get-all-task
      parameters:
      - description: limit on page outpu
        in: query
        name: limit
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all tasks
      tags:
      - tasks
  /api/v1/tasks/create:
    post:
      consumes:
      - application/json
      description: Creates a new task using the parameters and returns its ID on success.
        By default, a new task has an internal status of "planned"
      operationId: create-task
      parameters:
      - description: You need to give the task a name, its importance (high or low(default))
          and a description.
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/entity.Task'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create task
      tags:
      - tasks
  /api/v1/tasks/delete:
    delete:
      consumes:
      - application/json
      description: Deleting a task using the ID obtained from the parameter.
      operationId: delete-task
      parameters:
      - description: task ID to delete
        in: query
        name: taskID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Deleting a task
      tags:
      - tasks
  /api/v1/tasks/id:
    get:
      consumes:
      - application/json
      description: We get the task by its ID in the request parameters.
      operationId: get-task
      parameters:
      - description: "Yes"
        in: query
        name: taskId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieving a task by its ID
      tags:
      - tasks
  /api/v1/tracker/start:
    post:
      consumes:
      - application/json
      description: Starts counting down the task completion time for the user. Inside,
        the task status changes from "planned" to "accepted". If successful, we receive
        the tracker ID.
      operationId: start-tracker
      parameters:
      - description: specify task ID
        in: query
        name: task_id
        required: true
        type: string
      - description: specify user ID
        in: query
        name: people_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Starts timing on a task for the user.
      tags:
      - tracker
  /api/v1/tracker/stop:
    post:
      consumes:
      - application/json
      description: Ends the task timer for the user. Inside, the task status changes
        from “accepted” to “completed”.
      operationId: stop-tracker
      parameters:
      - description: specify task ID
        in: query
        name: task_id
        required: true
        type: string
      - description: specify user ID
        in: query
        name: people_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Stops the execution time of a task for the user.
      tags:
      - tracker
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.signInInput'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: SignIn
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create_account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/entity.Manager'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: SignUp
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
